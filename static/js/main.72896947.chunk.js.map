{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","list","this","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","key","localStorage","hasOwnProperty","value","getItem","JSON","parse","setState","e","setItem","stringify","id","Math","random","slice","push","updatedList","filter","item","class","type","className","placeholder","onChange","updateInput","target","onClick","addItem","disabled","length","map","deleteItem","alt","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PA0GgBA,G,wDAtGd,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,KAAM,IAJS,E,gEAQjBC,KAAKC,+BACLC,OAAOC,iBACL,eACAH,KAAKI,wBAAwBC,KAAKL,S,6CAKpCE,OAAOI,oBACL,eACAN,KAAKI,wBAAwBC,KAAKL,OAEpCA,KAAKI,4B,qDAIL,IAAK,IAAIG,KAAOP,KAAKH,MACnB,GAAIW,aAAaC,eAAeF,GAAM,CACpC,IAAIG,EAAQF,aAAaG,QAAQJ,GACjC,IACEG,EAAQE,KAAKC,MAAMH,GACnBV,KAAKc,SAAL,eAAiBP,EAAMG,IACvB,MAAOK,GACPf,KAAKc,SAAL,eAAiBP,EAAMG,Q,gDAO7B,IAAK,IAAIH,KAAOP,KAAKH,MACnBW,aAAaQ,QAAQT,EAAKK,KAAKK,UAAUjB,KAAKH,MAAMU,O,kCAI5CA,EAAKG,GACfV,KAAKc,SAAL,eAAiBP,EAAMG,M,gCAIvB,IAAMZ,EAAU,CACdoB,GAAI,EAAIC,KAAKC,SACbV,MAAOV,KAAKH,MAAMC,QAAQuB,SAGtBtB,EAAI,YAAOC,KAAKH,MAAME,MAC5BA,EAAKuB,KAAKxB,GACVE,KAAKc,SAAS,CACZf,OACAD,QAAS,O,iCAIFoB,GACT,IACMK,EADI,YAAOvB,KAAKH,MAAME,MACHyB,QAAO,SAAAC,GAAI,OAAIA,EAAKP,KAAOA,KACpDlB,KAAKc,SAAS,CAAEf,KAAMwB,M,+BAGd,IAAD,OACP,OACE,yBAAKG,MAAM,OACT,yCACA,6BACI,0BAAMR,GAAG,aACP,2BAAOS,KAAK,OAAOC,UAAU,WAAWC,YAAY,gBAClDnB,MAAOV,KAAKH,MAAMC,QAClBgC,SAAU,SAAAf,GAAC,OAAI,EAAKgB,YAAY,UAAWhB,EAAEiB,OAAOtB,UAEtD,4BACEkB,UAAU,SACVK,QAAS,kBAAM,EAAKC,WACpBC,UAAWnC,KAAKH,MAAMC,QAAQsC,QAHhC,OAOA,6BAZF,IAYS,6BACP,4BACGpC,KAAKH,MAAME,KAAKsC,KAAI,SAAAZ,GACnB,OACE,wBAAIlB,IAAKkB,EAAKP,IACXO,EAAKf,MACN,4BAAQkB,UAAU,mBAAmBK,QAAS,kBAAM,EAAKK,WAAWb,EAAKP,MACvE,uBAAGU,UAAU,OAAOW,IAAI,UAAxB,iB,GA5FNC,IAAMC,YCSJC,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.72896947.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: \"\",\n      list: []\n    };\n  }\n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    for (let key in this.state) {\n      if (localStorage.hasOwnProperty(key)) {\n        let value = localStorage.getItem(key);\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    for (let key in this.state) {\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  updateInput(key, value) {\n    this.setState({ [key]: value });\n  }\n\n  addItem() {\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n \n    };\n    const list = [...this.state.list];\n    list.push(newItem);\n    this.setState({\n      list,\n      newItem: \"\"\n    });\n  }\n\n  deleteItem(id) {\n    const list = [...this.state.list];\n    const updatedList = list.filter(item => item.id !== id);\n    this.setState({ list: updatedList });\n  }\n  \n  render() {\n    return (\n      <div class=\"App\">\n        <h1>ToDo List</h1>\n        <br/>\n            <form id=\"todo-Form\">\n              <input type=\"text\" className=\"txtInput\" placeholder=\"Enter Item...\"\n                value={this.state.newItem}\n                onChange={e => this.updateInput(\"newItem\", e.target.value)}\n              />\n              <button\n                className=\"btnAdd\"\n                onClick={() => this.addItem()}\n                disabled={!this.state.newItem.length}\n              >\n                ADD\n              </button>\n              <br /> <br />\n              <ul>\n                {this.state.list.map(item => {\n                  return (\n                    <li key={item.id}>\n                      {item.value}\n                      <button className=\"btn btn-floating\" onClick={() => this.deleteItem(item.id)}>\n                        <i className=\"icon\" alt=\"Delete\">X</i>\n                      </button>\n                    </li>\n                  );\n                })}\n              </ul>\n            </form>\n      </div>\n    );\n  }\n}\nexport default  App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}